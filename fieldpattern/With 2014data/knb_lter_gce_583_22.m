function [s,msg] = knb_lter_gce_583_22(pn,cachedata,username,password,entities)%Retrieves and loads EML-described data tables for data package knb-lter-gce.583.22%
%syntax: [s,msg] = knb_lter_gce_583_22(pn,cachedata,username,password,entities)
%
%input:
%   pn = file system path for saving temporary files (default = pwd)
%   cachedata = option to use cached entity files if they exist in pn (0 = no/default, 1 = yes)
%   username = username for HTTPS authentication (default = '')
%   password = password for HTTPS authentication (default = '')
%   entities = cell array of entities to retrieve (default = '' for all)
%
%output:
%   s = 1xn structure containing metadata and data arrays for each downloadable data table, with fields:
%      project = name of the project responsible for the data set (string; repeated for each dimension of s)
%      packageid = data set packageID (string; repeated for each dimension of s)
%      title = data set title (string; repeated for each dimension of s)
%      abstract = data set abstract (string; repeated for each dimension of s)
%      keywords = data set keywords (string; repeated for each dimension of s)
%      creator = data set creator information (cell array; repeated for each dimension of s)
%      contact = data set contact information (cell array; repeated for each dimension of s)
%      rights = data set intellectual rights information (cell array; repeated for each dimension of s)
%      dates = data set temporal coverage (cell array; repeated for each dimension of s)
%      geography = data set geographic coverage (cell array; cell array of descriptions plus corresponding
%         numeric arrays of longitude/latitude pairs for NW, NE, SE, SW corners; repeated for each dimension of s)
%      taxa = data set taxonomic coverage (cell array; species and common names only; repeated for each dimension of s)
%      methods = data set methods and instrumentation (cell array; repeated for each dimension of s)
%      sampling = data set sampling description (cell array; repeated for each dimension of s)
%      entity = data set table (entity) name (string) 
%      url = data table (entity) download URL (string)
%      filename = data set file (object) name (string)
%      description = data table (entity) description (string)
%      names = cell array of column names
%      units = cell array of column units
%      definitions = cell array of column definitions
%      datatypes = cell array of column data types
%      scales = cell array of column measurement scale types
%      codes = cell array of column codes and code definitions
%      bounds = cell array of column bounds (e.g. 'value > 0; value < 10')
%      data = cell array of column data arrays (i.e. typed numeric arrays and cell arrays of strings)
%   msg = text of any error message
%
%notes:
%   1) This m-file calls 'urlwrite' to download EML-described data objects,
%      which requires MATLAB 6.5 (R13) or higher, and calls 'textscan.m' to parse
%      the downloaded data files, which requires MATLAB 7 (R14) or higher.
%   2) HTTPS downloads depend on access to cURL with SSL libraries in the system path (see http://curl.haxx.se/)
%
%auto-generated by EMLdataset2mfile.xsl v1.02 (http://gce-lter.marsci.uga.edu/public/xsl/toolbox/EMLdataset2mfile.xsl)
%by Wade Sheldon <sheldon@uga.edu>, Georgia Coastal Ecosystems LTER

%check for omitted path, set working directory
if exist('pn','var') ~= 1
   pn = pwd;
elseif ~isdir(pn)
   pn = pwd;
end

%check for omitted cachedata argument, set default to 0 (no) to force new download
if exist('cachedata','var') ~= 1
   cachedata = 0;
end

%check for omitted username argument, set default to '' for none
if exist('username','var') ~= 1
   username = '';
end

%check for omitted password argument, set default to '' for none
if exist('password','var') ~= 1
   password = '';
end

%check for omitted entities argument, set default to '' for all
if exist('entities','var') ~= 1 || isnumeric(entities)
   entities = '';
elseif ischar(entities)
   entities = cellstr(entities);
end

%initialize output and runtime variables
s = [];
msg = '';
fn = '';

%download file INS-GCET-1608_Iva_2013_1_1.CSV or load from cache if entity is specified
if isempty(entities) || sum(strcmpi('INS-GCET-1608_Iva_2013',entities)) > 0
   fn = 'INS-GCET-1608_Iva_2013_1_1.CSV';  %assign filename based on objectName
   url = 'https://pasta.lternet.edu/package/data/eml/knb-lter-gce/583/22/1b22fb97af82044158ef85a73065b355';
   if isempty(fn)
      fn = 'INS-GCET-1608_Iva_2013.txt';  %use entityName if objectName element empty
   end
   if cachedata == 0 || exist([pn,filesep,fn],'file') ~= 2
      [fn,msg] = get_file(url,fn,pn,username,password);
   end
else
   fn = '';
end

%check for successful file download
if ~isempty(fn)

   %declare entity title and description
   entityname = 'INS-GCET-1608_Iva_2013';
   filename = 'INS-GCET-1608_Iva_2013_1_1.CSV';
   entitydesc = 'Insect fauna of Iva patches in 2013';

   %declare parameters for textcan function
   headerlines = 5;
   terminator = '\r\n';
   terminator = strrep(strrep(terminator,'#x0A','\n'),'#x0D','\r'); %convert entity references to conventional symbols

   delimiter = ',';
   delimiter = strrep(delimiter,'#x20',' ');  %convert space entity reference to space literal

   collapse_delim = '';
   if strcmpi('yes',collapse_delim) == 1
      collapse = 1;
   else
      collapse = 0;
   end

   %declare format string for textscan function
   fstr = '%q%q%d%d%f%q%d%q%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d';

   %declare arrays of distinct string and numeric missing value codes
   missingvals = {'','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'};
   missingvals = strrep(missingvals,'NaN','');  %convert NaN to empty (native missing value code)
   missingvals = missingvals(~cellfun('isempty',missingvals));  %remove empty cells
   Inumeric = ~isnan(str2double(missingvals)); %get index of numeric missing value codes
   missingvals_num = unique(str2double(missingvals(Inumeric))); %convert numeric missing value codes to double array
   Istring = ~Inumeric;  %get index of string missing value codes
   missingvals = unique(missingvals(Istring));  %generate string missing value codes for textscan function

   %declare array of attribute names
   att_names = { ...
      'Location', ...
      'Date', ...
      'Location_code', ...
      'Patch_ID', ...
      'Part_Sampled', ...
      'Time_CrabSample', ...
      'Armases', ...
      'Time_InsectSample', ...
      'Spider', ...
      'Ant', ...
      'Ophraella', ...
      'Paria', ...
      'Uroleucon', ...
      'Hesperotettix', ...
      'Other_Grasshopper', ...
      'Other_Planthoppers', ...
      'Micrutalis', ...
      'Cryptolaemus', ...
      'Coccinella_septempunctata', ...
      'Cycloneda_sanguinea', ...
      'Naemia', ...
      'Psyllobora', ...
      'Ladybug_Pupa', ...
      'Ladybug_Larvae' ...
   };

   %declare array of attribute descriptions
   att_desc = { ...
      'Location of the patch sampled.', ...
      'Date the sample was taken.', ...
      'numeric code for variable "Location".', ...
      'ID of patch within each location', ...
      'fraction of the patch that was sampled', ...
      'time of day when the crabs (Armases) were sampled. (Not recorded in 2014)', ...
      'number of crab (Armases cinereum) found. (Not recorded in 2014)', ...
      'time of day when the insects were sampled. (Not recorded in 2014)', ...
      'number of spiders (any species) found', ...
      'number of ants (any species) found', ...
      'number of leaf beetles (Orphulella pelidna) found', ...
      'number of leaf beetles (Paria aterrima) found', ...
      'number of aphids (Uroleucon ambrosiae) found', ...
      'number of grasshopper (Hesperotettix floridensis) found', ...
      'number of grasshopper other than Hesperotettix found', ...
      'number of planthoppers found', ...
      'number of treehoppers (Micrutalis calva) found', ...
      'number of small beetles (Cryptolaemus sp.) found. Species not identified', ...
      'number of 7-spot ladybugs (Coccinella septempunctata) found', ...
      'number of spotless ladybug (Cycloneda sanguinea) found', ...
      'number of ladybugs (Naemia sp.) found. Species not identified', ...
      'number of fungus-eating ladybugs (Psyllobora sp.) species not identified', ...
      'Number of ladybug pupa found. Species not identified', ...
      'Number of ladybug larvae found. Species not identified' ...
   };

   %declare array of attribute types
   att_types = lower({ ...
      'string', ...
      'dateTime', ...
      'integer', ...
      'integer', ...
      'float', ...
      'dateTime', ...
      'integer', ...
      'dateTime', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer' ...
   });

   %declare array of attribute units
   att_units = { ...
      '', ...
      'DD-WWW-YYYY', ...
      '', ...
      '', ...
      'dimensionless', ...
      'hh:mm', ...
      'number', ...
      'hh:mm', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number' ...
   };

   %declare array of measurement scales
   att_scales = { ...
      'nominal', ...
      'datetime', ...
      'nominal', ...
      'nominal', ...
      'ratio', ...
      'datetime', ...
      'ratio', ...
      'datetime', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio' ...
   };

   %declare array of code definitions
   att_codes = { ...
      '', ...
      '', ...
      '1 = dike, 2 = airport, 3 = lighthouse', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '' ...
   };

   %declare array of value bounds
   att_bounds = { ...
      '', ...
      '', ...
      '', ...
      '', ...
      'value >= 0; value <= 1; ', ...
      '', ...
      'value >= 0; value <= 100; ', ...
      '', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 1000; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ' ...
   };

   %initialize structure dimension for first data table
   if isempty(s)
      dim = 1;
      s = struct('packageid','', ...
         'project','', ...
         'title','', ...
         'abstract','', ...
         'keywords','', ...
         'creator','', ...
         'contact','', ...
         'rights','', ...
         'dates','', ...
         'geography','', ...
         'taxa','', ...
         'methods','', ...
         'sampling','', ...
         'entity','', ...
         'url','', ...
         'filename','', ...
         'description','', ...
         'names','', ...
         'units','', ...
         'definitions','', ...
         'datatypes','', ...
         'scales','', ...
         'codes','', ...
         'bounds','', ...
         'data','');
   else
      dim = length(s) + 1;
   end

   %populate structure fields for current data table
   s(dim).entity = entityname;
   s(dim).url = url;
   s(dim).filename = filename;
   s(dim).description = entitydesc;
   s(dim).names = att_names';
   s(dim).units = att_units';
   s(dim).definitions = att_desc';
   s(dim).datatypes = att_types';
   s(dim).scales = att_scales';
   s(dim).codes = att_codes';
   s(dim).bounds = att_bounds';

   %parse downloaded file
   err = [];  %initialize error object
   try
      fid = fopen(fn,'r');  %open file for read
      if ~isempty(missingvals) && ~isempty(delimiter) && ~isempty(terminator)
         %run textscan with missing value codes
         ar = textscan(fid,fstr,'Delimiter',delimiter,'EndOfLine',terminator,'Headerlines',headerlines, ...
            'TreatAsEmpty',missingvals,'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      elseif ~isempty(delimiter) && ~isempty(terminator)
         %run textscan without missing value codes
         ar = textscan(fid,fstr,'Delimiter',delimiter,'EndOfLine',terminator,'Headerlines',headerlines, ...
            'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      elseif ~isempty(delimiter)
         %run textscan without missing value codes or explicit line terminator
         ar = textscan(fid,fstr,'Delimiter',delimiter,'Headerlines',headerlines,'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      else
         %run textscan without missing value codes or explicit terminator or delimiters
         ar = textscan(fid,fstr,'Headerlines',headerlines,'ReturnOnError',0);
      end
      fclose(fid);  %close file handle
   catch err
      ar = [];  %return empty array on error
   end
   if ~isempty(err)
      msg = err.message;
   end

   %extract data arrays from single cell, add to output structure

   %convert numeric values matching numeric missing values codes to NaN
   if ~isempty(ar) && ~isempty(missingvals_num)
      for col = 1:length(ar)
         vals = ar{col};
         if isnumeric(vals)
            Inull = zeros(length(vals),1);  %init index of missing values
            for missval = 1:length(missingvals_num)
               Inull(vals == missingvals_num(missval)) = 1;  %update index for any values matching a missing value code
            end
            Inull = find(Inull);
            if ~isempty(Inull)
               vals(Inull) = NaN;
               ar{col} = vals;
            end
         end
      end
   end

   %add data arrays to structure field
   s(dim).data = ar(:);

end

%download file INS-GCET-1608_Iva_2014_1_1.CSV or load from cache if entity is specified
if isempty(entities) || sum(strcmpi('INS-GCET-1608_Iva_2014',entities)) > 0
   fn = 'INS-GCET-1608_Iva_2014_1_1.CSV';  %assign filename based on objectName
   url = 'https://pasta.lternet.edu/package/data/eml/knb-lter-gce/583/22/8ae016d3046ae5e672512cc133818d49';
   if isempty(fn)
      fn = 'INS-GCET-1608_Iva_2014.txt';  %use entityName if objectName element empty
   end
   if cachedata == 0 || exist([pn,filesep,fn],'file') ~= 2
      [fn,msg] = get_file(url,fn,pn,username,password);
   end
else
   fn = '';
end

%check for successful file download
if ~isempty(fn)

   %declare entity title and description
   entityname = 'INS-GCET-1608_Iva_2014';
   filename = 'INS-GCET-1608_Iva_2014_1_1.CSV';
   entitydesc = 'Insect fauna of Iva patches in 2014';

   %declare parameters for textcan function
   headerlines = 5;
   terminator = '\r\n';
   terminator = strrep(strrep(terminator,'#x0A','\n'),'#x0D','\r'); %convert entity references to conventional symbols

   delimiter = ',';
   delimiter = strrep(delimiter,'#x20',' ');  %convert space entity reference to space literal

   collapse_delim = '';
   if strcmpi('yes',collapse_delim) == 1
      collapse = 1;
   else
      collapse = 0;
   end

   %declare format string for textscan function
   fstr = '%q%q%d%d%f%q%d%q%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d';

   %declare arrays of distinct string and numeric missing value codes
   missingvals = {'','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'};
   missingvals = strrep(missingvals,'NaN','');  %convert NaN to empty (native missing value code)
   missingvals = missingvals(~cellfun('isempty',missingvals));  %remove empty cells
   Inumeric = ~isnan(str2double(missingvals)); %get index of numeric missing value codes
   missingvals_num = unique(str2double(missingvals(Inumeric))); %convert numeric missing value codes to double array
   Istring = ~Inumeric;  %get index of string missing value codes
   missingvals = unique(missingvals(Istring));  %generate string missing value codes for textscan function

   %declare array of attribute names
   att_names = { ...
      'Location', ...
      'Date', ...
      'Location_code', ...
      'Patch_ID', ...
      'Part_Sampled', ...
      'Time_CrabSample', ...
      'Armases', ...
      'Time_InsectSample', ...
      'Spider', ...
      'Ant', ...
      'Ophraella', ...
      'Paria', ...
      'Uroleucon', ...
      'Hesperotettix', ...
      'Other_Grasshopper', ...
      'Other_Planthoppers', ...
      'Micrutalis', ...
      'Cryptolaemus', ...
      'Coccinella_septempunctata', ...
      'Cycloneda_sanguinea', ...
      'Naemia', ...
      'Psyllobora', ...
      'Ladybug_Pupa', ...
      'Ladybug_Larva' ...
   };

   %declare array of attribute descriptions
   att_desc = { ...
      'Location of the patch sampled.', ...
      'Date the sample was taken.', ...
      'numeric code for variable "Location".', ...
      'ID of patch within each location', ...
      'fraction of the patch that was sampled', ...
      'time of day when the crabs (Armases) were sampled. (Not recorded in 2014)', ...
      'number of crab (Armases cinereum) found. (Not recorded in 2014)', ...
      'time of day when the insects were sampled. (Not recorded in 2014)', ...
      'number of spiders (any species) found', ...
      'number of ants (any species) found', ...
      'number of leaf beetles (Orphulella pelidna) found', ...
      'number of leaf beetles (Paria aterrima) found', ...
      'number of aphids (Uroleucon ambrosiae) found', ...
      'number of grasshoppers (Hesperotettix floridensis) found', ...
      'number of grasshoppers other than Hesperotettix found', ...
      'number of planthoppers found', ...
      'number of treehoppers (Micrutalis calva) found', ...
      'number of small beetles (Cryptolaemus sp.) found. Species not identified', ...
      'number of 7-spot ladybugs (Coccinella septempunctata) found', ...
      'number of spotless ladybugs (Cycloneda sanguinea) found', ...
      'number of ladybugs (Naemia sp.) found. Species not identified', ...
      'number of fungus-eating ladybugs (Psyllobora sp.) species not identified', ...
      'Number of ladybug pupa found. Species not identified', ...
      'Number of ladybug larvae found. Species not identified' ...
   };

   %declare array of attribute types
   att_types = lower({ ...
      'string', ...
      'dateTime', ...
      'integer', ...
      'integer', ...
      'float', ...
      'dateTime', ...
      'integer', ...
      'dateTime', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer', ...
      'integer' ...
   });

   %declare array of attribute units
   att_units = { ...
      '', ...
      'DD-WWW-YYYY', ...
      '', ...
      '', ...
      'dimensionless', ...
      'hh:mm', ...
      'number', ...
      'hh:mm', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number' ...
   };

   %declare array of measurement scales
   att_scales = { ...
      'nominal', ...
      'datetime', ...
      'nominal', ...
      'nominal', ...
      'ratio', ...
      'datetime', ...
      'ratio', ...
      'datetime', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio' ...
   };

   %declare array of code definitions
   att_codes = { ...
      '', ...
      '', ...
      '1 = dike, 2 = airport, 3 = lighthouse', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '' ...
   };

   %declare array of value bounds
   att_bounds = { ...
      '', ...
      '', ...
      '', ...
      '', ...
      'value >= 0; value <= 1; ', ...
      '', ...
      'value >= 0; value <= 100; ', ...
      '', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 1000; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 100; ' ...
   };

   %initialize structure dimension for first data table
   if isempty(s)
      dim = 1;
      s = struct('packageid','', ...
         'project','', ...
         'title','', ...
         'abstract','', ...
         'keywords','', ...
         'creator','', ...
         'contact','', ...
         'rights','', ...
         'dates','', ...
         'geography','', ...
         'taxa','', ...
         'methods','', ...
         'sampling','', ...
         'entity','', ...
         'url','', ...
         'filename','', ...
         'description','', ...
         'names','', ...
         'units','', ...
         'definitions','', ...
         'datatypes','', ...
         'scales','', ...
         'codes','', ...
         'bounds','', ...
         'data','');
   else
      dim = length(s) + 1;
   end

   %populate structure fields for current data table
   s(dim).entity = entityname;
   s(dim).url = url;
   s(dim).filename = filename;
   s(dim).description = entitydesc;
   s(dim).names = att_names';
   s(dim).units = att_units';
   s(dim).definitions = att_desc';
   s(dim).datatypes = att_types';
   s(dim).scales = att_scales';
   s(dim).codes = att_codes';
   s(dim).bounds = att_bounds';

   %parse downloaded file
   err = [];  %initialize error object
   try
      fid = fopen(fn,'r');  %open file for read
      if ~isempty(missingvals) && ~isempty(delimiter) && ~isempty(terminator)
         %run textscan with missing value codes
         ar = textscan(fid,fstr,'Delimiter',delimiter,'EndOfLine',terminator,'Headerlines',headerlines, ...
            'TreatAsEmpty',missingvals,'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      elseif ~isempty(delimiter) && ~isempty(terminator)
         %run textscan without missing value codes
         ar = textscan(fid,fstr,'Delimiter',delimiter,'EndOfLine',terminator,'Headerlines',headerlines, ...
            'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      elseif ~isempty(delimiter)
         %run textscan without missing value codes or explicit line terminator
         ar = textscan(fid,fstr,'Delimiter',delimiter,'Headerlines',headerlines,'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      else
         %run textscan without missing value codes or explicit terminator or delimiters
         ar = textscan(fid,fstr,'Headerlines',headerlines,'ReturnOnError',0);
      end
      fclose(fid);  %close file handle
   catch err
      ar = [];  %return empty array on error
   end
   if ~isempty(err)
      msg = err.message;
   end

   %extract data arrays from single cell, add to output structure

   %convert numeric values matching numeric missing values codes to NaN
   if ~isempty(ar) && ~isempty(missingvals_num)
      for col = 1:length(ar)
         vals = ar{col};
         if isnumeric(vals)
            Inull = zeros(length(vals),1);  %init index of missing values
            for missval = 1:length(missingvals_num)
               Inull(vals == missingvals_num(missval)) = 1;  %update index for any values matching a missing value code
            end
            Inull = find(Inull);
            if ~isempty(Inull)
               vals(Inull) = NaN;
               ar{col} = vals;
            end
         end
      end
   end

   %add data arrays to structure field
   s(dim).data = ar(:);

end

%download file INS-GCET-1608_Structure_1_1.CSV or load from cache if entity is specified
if isempty(entities) || sum(strcmpi('INS-GCET-1608_Structure',entities)) > 0
   fn = 'INS-GCET-1608_Structure_1_1.CSV';  %assign filename based on objectName
   url = 'https://pasta.lternet.edu/package/data/eml/knb-lter-gce/583/22/92d777ddcff62b802f21b941869dc18d';
   if isempty(fn)
      fn = 'INS-GCET-1608_Structure.txt';  %use entityName if objectName element empty
   end
   if cachedata == 0 || exist([pn,filesep,fn],'file') ~= 2
      [fn,msg] = get_file(url,fn,pn,username,password);
   end
else
   fn = '';
end

%check for successful file download
if ~isempty(fn)

   %declare entity title and description
   entityname = 'INS-GCET-1608_Structure';
   filename = 'INS-GCET-1608_Structure_1_1.CSV';
   entitydesc = 'Structure of Iva patches on Sapelo Island in 2013';

   %declare parameters for textcan function
   headerlines = 5;
   terminator = '\r\n';
   terminator = strrep(strrep(terminator,'#x0A','\n'),'#x0D','\r'); %convert entity references to conventional symbols

   delimiter = ',';
   delimiter = strrep(delimiter,'#x20',' ');  %convert space entity reference to space literal

   collapse_delim = '';
   if strcmpi('yes',collapse_delim) == 1
      collapse = 1;
   else
      collapse = 0;
   end

   %declare format string for textscan function
   fstr = '%q%d%d%f%f%q%f%f%f%f%f%f%f%f%f%f';

   %declare arrays of distinct string and numeric missing value codes
   missingvals = {'','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN','NaN'};
   missingvals = strrep(missingvals,'NaN','');  %convert NaN to empty (native missing value code)
   missingvals = missingvals(~cellfun('isempty',missingvals));  %remove empty cells
   Inumeric = ~isnan(str2double(missingvals)); %get index of numeric missing value codes
   missingvals_num = unique(str2double(missingvals(Inumeric))); %convert numeric missing value codes to double array
   Istring = ~Inumeric;  %get index of string missing value codes
   missingvals = unique(missingvals(Istring));  %generate string missing value codes for textscan function

   %declare array of attribute names
   att_names = { ...
      'Location', ...
      'Location_Code', ...
      'Patch_ID', ...
      'Latitude', ...
      'Longitude', ...
      'Sample_Date', ...
      'Length', ...
      'Width', ...
      'Area', ...
      'Height', ...
      'Distance_to_Nearest', ...
      'Noon_Shade', ...
      'Surround_Mud', ...
      'Surround_Borrichia', ...
      'Surround_Dry', ...
      'Surround_Grass' ...
   };

   %declare array of attribute descriptions
   att_desc = { ...
      'Location of the patch', ...
      'Numeric code for variable "Location"', ...
      'ID of patch within each location', ...
      'Latitude of the patch. Taken in 2014, using GPS device. NaNs in 6 sites because they were lost in year 2014.', ...
      'Longitude of the patch.Taken in 2014, using GPS device.', ...
      'Date when patch dimensions (L, W, H), Distance_to_Nearest and surrounding environment were sampled.', ...
      'Length of the patch. Measured at a randomly chosen angle', ...
      'Width of the patch, measured at an angle perpendiculer to the "Length measurement"', ...
      'Area of the patch estimated by Length x Width', ...
      'Height of the patch. Measured with measuring stick', ...
      'The shortest distance between the focal patch and the nearest other patch of Iva frutescens', ...
      'The percentage of patch shaded on the observation close to noon (13:00). Taken in 2013 Jun 8 to 11.', ...
      'Proportion of surrounding environment that was mud. Taken in 2013. Note that the four "Surround_" variables may not sum to 1 because there were other types not recorded.', ...
      'Proportion of surrounding environment as Borrichia frutescens', ...
      'Proportion of surrounding environment as dry land', ...
      'Proportion of surrounding environment as grass land' ...
   };

   %declare array of attribute types
   att_types = lower({ ...
      'string', ...
      'integer', ...
      'integer', ...
      'float', ...
      'float', ...
      'dateTime', ...
      'float', ...
      'float', ...
      'float', ...
      'float', ...
      'float', ...
      'float', ...
      'float', ...
      'float', ...
      'float', ...
      'float' ...
   });

   %declare array of attribute units
   att_units = { ...
      '', ...
      '', ...
      '', ...
      'degree', ...
      'degree', ...
      'DD-WWW-YYYY', ...
      'meter', ...
      'meter', ...
      'squareMeter', ...
      'meter', ...
      'meter', ...
      'dimensionless', ...
      'dimensionless', ...
      'dimensionless', ...
      'dimensionless', ...
      'dimensionless' ...
   };

   %declare array of measurement scales
   att_scales = { ...
      'nominal', ...
      'nominal', ...
      'nominal', ...
      'interval', ...
      'interval', ...
      'datetime', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio' ...
   };

   %declare array of code definitions
   att_codes = { ...
      '', ...
      '1 = dike, 2 = airport, 3 = lighthouse', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '' ...
   };

   %declare array of value bounds
   att_bounds = { ...
      '', ...
      '', ...
      '', ...
      'value >= -90; value <= 90; ', ...
      'value >= -180; value <= 180; ', ...
      '', ...
      'value >= 0; value <= 10; ', ...
      'value >= 0; value <= 10; ', ...
      'value >= 0; value <= 100; ', ...
      'value >= 0; value <= 3; ', ...
      'value >= 0; value <= 20; ', ...
      'value >= 0; value <= 1; ', ...
      'value >= 0; value <= 1; ', ...
      'value >= 0; value <= 1; ', ...
      'value >= 0; value <= 1; ', ...
      'value >= 0; value <= 1; ' ...
   };

   %initialize structure dimension for first data table
   if isempty(s)
      dim = 1;
      s = struct('packageid','', ...
         'project','', ...
         'title','', ...
         'abstract','', ...
         'keywords','', ...
         'creator','', ...
         'contact','', ...
         'rights','', ...
         'dates','', ...
         'geography','', ...
         'taxa','', ...
         'methods','', ...
         'sampling','', ...
         'entity','', ...
         'url','', ...
         'filename','', ...
         'description','', ...
         'names','', ...
         'units','', ...
         'definitions','', ...
         'datatypes','', ...
         'scales','', ...
         'codes','', ...
         'bounds','', ...
         'data','');
   else
      dim = length(s) + 1;
   end

   %populate structure fields for current data table
   s(dim).entity = entityname;
   s(dim).url = url;
   s(dim).filename = filename;
   s(dim).description = entitydesc;
   s(dim).names = att_names';
   s(dim).units = att_units';
   s(dim).definitions = att_desc';
   s(dim).datatypes = att_types';
   s(dim).scales = att_scales';
   s(dim).codes = att_codes';
   s(dim).bounds = att_bounds';

   %parse downloaded file
   err = [];  %initialize error object
   try
      fid = fopen(fn,'r');  %open file for read
      if ~isempty(missingvals) && ~isempty(delimiter) && ~isempty(terminator)
         %run textscan with missing value codes
         ar = textscan(fid,fstr,'Delimiter',delimiter,'EndOfLine',terminator,'Headerlines',headerlines, ...
            'TreatAsEmpty',missingvals,'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      elseif ~isempty(delimiter) && ~isempty(terminator)
         %run textscan without missing value codes
         ar = textscan(fid,fstr,'Delimiter',delimiter,'EndOfLine',terminator,'Headerlines',headerlines, ...
            'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      elseif ~isempty(delimiter)
         %run textscan without missing value codes or explicit line terminator
         ar = textscan(fid,fstr,'Delimiter',delimiter,'Headerlines',headerlines,'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      else
         %run textscan without missing value codes or explicit terminator or delimiters
         ar = textscan(fid,fstr,'Headerlines',headerlines,'ReturnOnError',0);
      end
      fclose(fid);  %close file handle
   catch err
      ar = [];  %return empty array on error
   end
   if ~isempty(err)
      msg = err.message;
   end

   %extract data arrays from single cell, add to output structure

   %convert numeric values matching numeric missing values codes to NaN
   if ~isempty(ar) && ~isempty(missingvals_num)
      for col = 1:length(ar)
         vals = ar{col};
         if isnumeric(vals)
            Inull = zeros(length(vals),1);  %init index of missing values
            for missval = 1:length(missingvals_num)
               Inull(vals == missingvals_num(missval)) = 1;  %update index for any values matching a missing value code
            end
            Inull = find(Inull);
            if ~isempty(Inull)
               vals(Inull) = NaN;
               ar{col} = vals;
            end
         end
      end
   end

   %add data arrays to structure field
   s(dim).data = ar(:);

end

%check for successful file download and parsing
if ~isempty(s)

   %set basic metadata contents from document
   packageid = 'knb-lter-gce.583.22';
   titlestr = 'Visual survey of insect communities on Iva frutescens in summer 2013 and 2014 on Sapelo Island, Georgia';
   abstract = 'Visual surveys were conducted in summer 2013 and 2014 to record the insect fauna that occurred on patches of Iva frutescens. Forty-four patches of Iva frutescens at three locations on Sapelo Island, Georgia, were marked for repetitive surveys. Thirty-eight of these patches were sampled in 2014. The patches were visually surveyed every three days from May 29 - June 15, 2013, and from June 1 - July 29, 2014, and the taxon and abundance of insects were recorded. This submission contains three data tables: 1. Insect fauna of Iva patches in 2013. This data set includes observations of 44 patches on 6 sampling dates, and includes Armases crab data. 2. Insect fauna of Iva patches in 2014. This data set includes observations of 38 patches on 20 sampling dates. 3. Structure of Iva patches on Sapelo Island in 2013. This data set contains the dimensions (Length, Width, Height) and surrounding environments of the Iva patches that were surveyed in 2013. The GPS locations of the patches were measured in 2014.';

   %set project title and funding
   project = 'Georgia Coastal Ecosystems LTER Project III (funding: This material is based upon work supported by the National Science Foundation under grant numbers OCE-9982133, OCE-0620959 and OCE-1237140. Any opinions, findings, conclusions, or recommendations expressed in the material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.)';
   %build cell array of creator contact information with labeled fields
   creators = { ...
         'Name: Wei-Ting Lin'; ...
         '   Address: Department of Biology and Chemistry, University of Houston, Houston, Texas, 77204-5513, USA'; ...
         '   Email: weiting.lin.lin@gmail.com'; ...
         '   Organization: University of Houston'; ...
      };

   %build cell array of dataset contact information with labeled fields
   contacts = { ...
         'Position: Information Manager'; ...
         '   Address: UNM Biology Department, MSC03-2020, 1 University of New Mexico, Albuquerque, NM, 87131-0001, USA'; ...
         '   Email: tech-support@lternet.edu'; ...
         '   Organization: LTER Network Office'; ...
         '   Website: http://www.lternet.edu'; ...
         'Position: GCE-LTER Information Manager'; ...
         '   Address: Dept. of Marine Sciences, University of Georgia, Athens, Georgia, 30602-3636, USA'; ...
         '   Email: gcelter@uga.edu'; ...
      };

   %build character array of dataset usage rights
   rights = { ...
         'All publications based on this data set must cite the contributor and Georgia Coastal Ecosystems LTER project, and two copies of the manuscript must be submitted to the GCE-LTER Information Management Office.'; ...
      };
   %build character array of keywords
   keywords = 'Georgia, Sapelo Island, USA, aphids, GCE, Georgia Coastal Ecosystems, ladybugs, LTER, metacommunities, patches, Acrididae, Acrididea, Acridoidea, Angiospermae, Animalia, Armases cinereum, Arthropoda, Asteraceae, Asterales, Asteranae, Bilateria, Brachyura, Caelifera, Chrysomelidae, Chrysomeloidea, Coleoptera, Crustacea, Cucujiformia, Decapoda, Ecdysozoa, Eucarida, Eumalacostraca, Eumolpinae, Gomphocerinae, Grapsoidea, Hesperotettix floridensis, Hexapoda, Holometabola, Insecta, Iva frutescens, Magnoliopsida, Malacostraca, Melanoplinae, Neoptera, Orphulella pelidna, Orthoptera, Paria aterrima, Plantae, Pleocyemata, Polyneoptera, Polyphaga, Protostomia, Pterygota, Sesarmidae, Spermatophytina, Streptophyta, Tracheophyta, Typophorini, Viridaeplantae, abundance, communities, insects, marshes, population dynamics, species diversity';

   %build cell array of study dates
   dates = { ...
         'BeginDate: 2013-05-29'; ...
         'EndDate: 2014-07-29'; ...
      };

   %build cell array of geographic names and bounding box coordinates (NW, NE, SE, SW)
   geography = { ...
         'Overall bounding box describing the geographic region within the Georgia Coastal Ecosystems LTER study domain represented in data set INS-GCET-1608, based on the maximum geographic extents of all site polygons referenced in the data set',[-81.307978,31.536369;-81.176185,31.536369;-81.176185,31.380150;-81.307978,31.380150]; ...
         'GCE Study Site Sapelo -- Sapelo Island, Sapelo Island, Georgia. Sapelo Island on the Southeast Georgia Coast',[-81.307978,31.536369;-81.176185,31.536369;-81.176185,31.380150;-81.307978,31.380150]; ...
      };

   %build cell array of taxa
   taxa = { ...
         'Armases cinereum (squareback marsh crab)'; ...
         'Hesperotettix floridensis'; ...
         'Iva frutescens (Jesuit''s bark, bigleaf sumpweed)'; ...
         'Orphulella pelidna'; ...
         'Paria aterrima'; ...
      };

   %build cell array of methods and instruments
   methods = { ...
         'method: Plot Location -- The 44/38 (in year 2013/2014) patches were located at 3 sites on Sapelo Island: the airport (12/10 patches), the lighthouse (11/8 patches), and the Marine Institute dike (21/20 patches). Each patch consisted of one or more adjacent Iva plants with contiguous canopies; patches were separated from one another and from other Iva plants by at least 0.5 m. Patch dimensions (L, W, H), patch isolation (Distance_to_Nearest) and surrounding environment were measured on May 28, 2013. Noon shade values were recorded on June 8 to 10, 2013. GPS coordinates were recorded in the year 2014. '; ...
         'method: Visual Survey -- Forty-four patches of Iva frutescens were surveyed every three days for a total of 18 days (6 samples from each patch). Most patches were fully sampled, only few large patches were partially sampled (half of the plant were examined). A visual survey of insect communities was conducted on patches of Iva frutescens. At each survey, plants were carefully examined and if found, 16 kinds of insects were recorded. A kind was a species, genus or higher taxonomical group and/or life stage. The occurrences of marsh crab (Armases cinereum) were recorded the same days as the insects but early in the morning (only in 2013). '; ...
      };

   %build cell array of sampling description information
   sampling = { ...
         'Insect Communties -- '; ...
         'The 44/38 (in year 2013/2014) patches were located at 3 sites on Sapelo Island: the airport (12/10 patches), the lighthouse (11/8 patches), and the Marine Institute dike (21/20 patches). Each patch consisted of one or more adjacent Iva plants with contiguous canopies; patches were separated from one another and from other Iva plants by at least 0.5 m. Patch dimensions (L, W, H), patch isolation (Distance_to_Nearest) and surrounding environment were measured on May 28, 2013. Noon shade values were recorded on June 8 to 10, 2013. GPS coordinates were recorded in the year 2014.'; ...
         'A visual survey of insect communities was conducted on patches of Iva frutescens. At each survey, plants were carefully examined and if found, 16 kinds of insects were recorded. A kind was a species, genus or higher taxonomical group and/or life stage. The occurrences of marsh crab (Armases cinereum) were recorded the same days as the insects but early in the morning (only in 2013).'; ...
         'Forty-four patches of Iva frutescens were surveyed every three days for a total of 18 days (6 samples from each patch). Most patches were fully sampled, only few large patches were partially sampled (half of the plant were examined).'; ...
      };

    %add document-level metadata to all structure dimensions
    for cnt = 1:length(s)
       s(cnt).project = project;
       s(cnt).packageid = packageid;
       s(cnt).title = titlestr;
       s(cnt).abstract = abstract;
       s(cnt).keywords = keywords;
       s(cnt).creator = creators;
       s(cnt).contact = contacts;
       s(cnt).rights = rights;
       s(cnt).dates = dates;
       s(cnt).geography = geography;
       s(cnt).taxa = taxa;
       s(cnt).methods = methods;
       s(cnt).sampling = sampling;
    end

else
   msg = 'no compatible data tables were successfully downloaded';
end

return


%----------------------------------------------------------------
%subfunction to download or copy a file to a local directory path
%----------------------------------------------------------------

function [fqfn,msg] = get_file(url,fn,pn,username,password)
%Fetches a file from an HTTP, HTTPS, FTP or file system URL
%and returns a fully qualified local filename for loading or transformation
%
%syntax: [fqfn,msg] = get_file(url,fn,pn,username,password)
%
%input:
%   url = http, https, ftp or file system address of the file
%   fn = filename for downloaded file
%   pn = pathname for downloading or copying file
%   username = username for HTTPS authentication (default = '')
%   password = password for HTTPS authentication (default = '')
%
%output:
%   fqfn = fully-qualified local filename
%   msg = text of any error message
%
%notes:
%   2) HTTPS downloads depend on access to cURL with SSL libraries in the system path (see http://curl.haxx.se/)
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 18-Jun-2013

%init output
fqfn = '';
msg = '';

%check for nonempty string url
if nargin >= 2 && ischar(url) && ~isempty(url) && ~isempty(fn)

   %validate path
   if exist('pn','var') ~= 1;
      pn = pwd;  %default to working directory if path omitted
   elseif ~isdir(pn)
      pn = pwd;  %default to working directory if path invalid
   end

   %check for omitted username argument, set default to '' for none
   if exist('username','var') ~= 1
      username = '';
   end

   %check for omitted password argument, set default to '' for none
   if exist('password','var') ~= 1
      password = '';
   end

   %init error flag
   err = 0;

   %download file using appropriate command based on protocol
   if strncmpi(url,'https',5)
      
      %generate curl command to evaluate
      if isempty(username)
         cmd = ['curl -s -X GET "',url,'" -o "',pn,filesep,fn,'"'];
         cmd_insecure = ['curl -k -s -X GET "',url,'" -o "',pn,filesep,fn,'"'];
      else
         cmd = ['curl -s -u ',username,':',password,' -X GET "',url,'" -o "',pn,filesep,fn,'"'];
         cmd_insecure = ['curl -k -s -u ',username,':',password,' -X GET "',url,'" -o "',pn,filesep,fn,'"'];
      end
      
      %run curl command, checking for system or cURL errors
      try
         [status,res] = system(cmd);
      catch errmsg
         err = 1;
      end
      if err == 1 || status > 0
         try
            %fall back to insecure SSL on certificate error
            [status,res] = system(cmd_insecure);
            if status > 0
               err = 1;
            end
         catch errmsg
            err = 1;
         end
      end
   elseif strncmpi(url,'http',4)
      %use urlwrite for http
      try
         urlwrite(url,[pn,filesep,fn]);
      catch errmsg
         err = 1;
      end
   elseif strncmpi(url,'ftp',3)
      %use urlwrite for ftp
      try
         urlwrite(url,[pn,filesep,fn]);
      catch errmsg
         err = 1;
      end
   elseif exist(url,'file') == 2
      %copy file from local system or UNC path to specified directory
      try
         copyfile(url,[pn,filesep,fn]);
      catch errmsg
         err = 1;
      end
   else
      err = 1; %unsupported option or invalid file url
   end

   %check for errors
   if err == 0 && exist([pn,filesep,fn],'file') == 2
      fqfn = [pn,filesep,fn];
   else
      msg = ['failed to retrieve the file from the specified url (',errmsg.message,')'];
   end

end

return





